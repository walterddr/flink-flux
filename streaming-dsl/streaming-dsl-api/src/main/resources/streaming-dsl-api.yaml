################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

swagger: '2.0'
info:
  description: Streaming DSL API
  version: '0.0.1'
  title: Streaming DSL API
  contact:
    email: athena-dev@uber.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: localhost
paths: {}
schemes:
  - http
definitions:
# -----------------------------------------------------------------------------
# Basic object definitions
# -----------------------------------------------------------------------------
  PropertyDef:
    type: object
    properties:
      name:
        type: string
        description: the property identifier
      value:
        type: object
        description: the property content
      reference:
        type: string
        description: if this is a reference type, describe the base reference
  ConfigMethodDef:
    type: object
    properties:
      name:
        type: string
        description: the configuration method/function name
      configArgs:
        type: array
        items:
          type: object
        description: the function call arguments defined in order
      hasReferenceInArgs:
        type: boolean
        description: describe whether this list of arguments has reference
        default: false
  ComponentRefDef:
    type: object
    properties:
      id:
        type: string
        description: the identifier of the component it is referring to
  InputSpecDef:
    type: object
    additionalProperties:
      $ref: '#/definitions/StreamSpecDef'
  StreamSpecDef:
    type: object
    properties:
      streamType:
        type: string
        description: the type of the stream
        enum:
          - DATA_STREAM
          - KEYED_STREAM
          - LEADING_CO_STREAM
          - FOLLOWING_CO_STREAM
          - BROADCAST_STREAM
          - TABLE_STREAM
        default: DATA_STREAM

# -----------------------------------------------------------------------------
# Topology Component Definitions
# -----------------------------------------------------------------------------
  ObjectDef:
    type: object
    properties:
      className:
        type: string
        description: the fully qualified class name of the object
      constructorArgs:
        type: array
        items:
          type: object
        description: the constructor arguments defined in order
      hasReferenceInArgs:
        type: boolean
        description: describe whether this list of arguments has reference
        default: false
      propertyList:
        type: array
        items:
          $ref: '#/definitions/PropertyDef'
        description: the optional properties accepted by this object for construct/config
      configMethods:
        type: array
        items:
          $ref: '#/definitions/ConfigMethodDef'
        description: the optional method provided by this object for configuration
  ComponentDef:
    allOf:
      - $ref: '#/definitions/ObjectDef'
      - type: object
        properties:
          id:
            type: string
            description: the identifier of this component
  VertexDef:
    allOf:
      - $ref: '#/definitions/ComponentDef'
      - type: object
        properties:
          parallelism:
            type: integer
            description: the parallelism of the vertex in the job graph
          inputSpec:
            type: object
            $ref: '#definitions/InputSpecDef'

  EdgeDef:
    allOf:
      - $ref: '#/definitions/ComponentDef'
      - type: object
        properties:
          fromVertex:
            type: string
            description: the ID of the start vertex of this edge
          toVertex:
            type: string
            description: the ID of the end vertex of this edge
  StreamDef:
    allOf:
      - $ref: '#/definitions/EdgeDef'
      - type: object
        properties:
          streamSpec:
            type: object
            $ref: '#definitions/StreamSpecDef'

# -----------------------------------------------------------------------------
# Topology Definition
# -----------------------------------------------------------------------------
  TopologyDef:
    type: object
    properties:
      # -----------------------------------------------------------------------
      # Basic properties of the entire topology.
      # -----------------------------------------------------------------------
      name:
        type: string
        description: the identifier name for this topology
      config:
        type: object
        additionalProperties:
          typ: object
        description: the additional metadata configuration for the topology
      propertyMap:
        type: object
        additionalProperties:
          $ref: '#/definitions/PropertyDef'
        description: the mapping of all the additional properties

      # -----------------------------------------------------------------------
      # Components of the topology that constructs all vertices.
      # -----------------------------------------------------------------------
      components:
        type: object
        additionalProperties:
          $ref: '#/definitions/ComponentDef'
        description: the mapping of all reusable components which are not directly used as DAG vertex.
      vertices:
        type: object
        additionalProperties:
          $ref: '#/definitions/VertexDef'
        description: the mapping from vertex identifiers to vertex definitions

      # -----------------------------------------------------------------------
      # Streams of the topology that constructs all edges.
      # -----------------------------------------------------------------------
      streams:
        type: array
        items:
          $ref: '#/definitions/StreamDef'
        description: list for all stream/edge defintiions